// room script file

bool spiderMoving = false;
int spiderTimer = 0;
bool mousetimer = false;
int mousetime = 0;
int mousexrunto = 0;
int mouseyrunto = 0;
bool mouseleft = true;
bool torchwalk = false;

function MakeMouseRun()
{
 mouseyrunto=Random(50)+670;
  
 if (mouseleft==true)
  {
    mousexrunto=cMouse.x-(Random(50)+100);
    cMouse.Walk(mousexrunto, mouseyrunto, eNoBlock, eAnywhere);
  }
 else
  {
    mousexrunto=cMouse.x+(Random(50)+100);
    cMouse.Walk(mousexrunto, mouseyrunto, eNoBlock, eAnywhere);
  }
}

function DropSpider()
{
  //oSpiderDrop.SetView(66, 0);
  //Wait(Random(100)+50);
  if (oSpiderDrop.Loop==1)
  {
    //DropTheSpider=false;
    oSpiderDrop.X=Random(1200)+40;
    oSpiderDrop.Animate(0, 3, eOnce, eNoBlock);
  }
  else
  {
    //DropTheSpider=true;
    oSpiderDrop.Animate(1, 3, eOnce, eNoBlock);
  }
  //Wait(Random(500)+40);
  //oSpiderDrop.Animate(1, Random(3)+1, eOnce, eNoBlock);
  //Wait(Random(500)+40);
  SetTimer(1, Random(300) + 100);
}

function SoftLoad()
{
 Wait(30);
 gQuestKitchen.ZOrder=0;
 gQuestKitchen.Visible=true;
 aPapermix.Play();
 Wait(UIPapersDelayFast);
 gQuestLivingRoom.ZOrder=1;
 gQuestLivingRoom.Visible=true;
 aPapermix.Play();
 Wait(UIPapersDelayFast);
 gQuestAttic.ZOrder=2;
 gQuestAttic.Visible=true;
 aPapermix.Play();
 Wait(UIPapersDelaySlow);
 gQuestAttic.Controls[2].AsLabel.Visible=true;
 aWriting.Play();
 Wait(UIPapersDelaySlow);
 gQuestAttic.Controls[3].AsLabel.Visible=true;
 aWriting.Play();
}

function ExplodeBox(Object *MyBox, int BoxX, int BoxY)
{
  DeathCount++;
  CheckDeathCount();
  if (ACHDyno1==false)
  {
    ACHDyno1=true;
    AchievementNew=true;
    iACH05.Graphic=432;
  }
  oDynomite.SetView(27);
  oDynomite.Animate(0, 5, eOnce, eBlock);
  MyBox.X=(MyBox.X-50);
  MyBox.SetView(26);
  aExplode.Play();
  MyBox.Animate(0, 2, eOnce, eNoBlock);
  cMonty.LockView(28);
  cMonty.Animate(0, 4, eOnce, eBlock);
  MyBox.X=(MyBox.X+50);
  cMonty.LoseInventory(iSaw);
  gQuestAttic.Controls[6].AsButton.Visible=false;
  gQuestAttic.Controls[7].AsButton.Visible=false;
  AtticToolCount=0;
  cMonty.ChangeRoom(5);
  
}

function DevilPopOut(Object *MyBox, int BoxX, int BoxY)
{
  DeathCount++;
  CheckDeathCount();
  if (ACHSaw==false)
  {
    ACHSaw=true;
    AchievementNew=true;
    iACH04.Graphic=432;
  }
  MyBox.X=(MyBox.X-200);
  MyBox.SetView(29);
  MyBox.Animate(0, 2, eOnce, eNoBlock);
  cMonty.LockView(30);
  cMonty.Animate(0, 2, eOnce, eBlock);
  MyBox.X=(MyBox.X+200);
  cMonty.LoseInventory(iDynamite);
  gQuestAttic.Controls[5].AsButton.Visible=false;
  AtticToolCount=0;
  cMonty.ChangeRoom(5);
}
function hHotspot1_WalkOn(Hotspot *theHotspot)
{
//if (AtticToolCount!=2)
//{
  //Display("I shant go downstairs without checking the boxes for tools");
  //player.Walk(780, 630, eBlock);
//}
//else
//{
  String puzzlestage = String.Format("Stage: %d", Puzzle01Stage);
  player.SayBackground(puzzlestage);
  if (CanLeaveAttic==true && Puzzle01Stage==3)
  {
    Puzzle01Stage=4;
    cMonty.LoseInventory(iExacto);
    gAtticTools.Visible=false;
    cMonty.ChangeRoom(3, 366, 218, eDirectionRight);
  }
  else if (CanLeaveAttic==true && Puzzle01Stage>3)
  {
    cMonty.ChangeRoom(3, 366, 218, eDirectionRight);
  }
}
//}

function BurnOrOpenBox(Object *theobj, int oboxid)
{
  if (player.ActiveInventory.ID == 21) //TORCH
{
  player.Walk(theobj.X, theobj.Y, eBlock, eWalkableAreas); //walk to the box
  cMonty.LockView(42); //lock the view holding torch
  oTorch.SetPosition(theobj.X+20, theobj.Y-30);
  oTorch.Visible=true;
  oTorch.Animate(1, 2, eRepeat, eNoBlock);
  Wait(20);
  oTorch.Visible=false;
  cMonty.LockView(2);
  theobj.SetView(24); //sets the box to burn animation
  aFire.Play(); //plays fire sound
  if (sawBox==oboxid)
  {
    oSaw.Graphic=246;
    aDemon_die.Play();
    DevilSkeleton=true;
    oSaw.X=theobj.X;
    oSaw.Y=theobj.Y;
    if (oboxid==7)
      {
        torchwalk=true;
      }
  }
  theobj.Animate(0, 3, eOnce, eBlock);
  if (DynoBox==oboxid)
  {
    aFuse.Play();
    oDynomite.X=theobj.X+25;
    oDynomite.Y=theobj.Y;
    ExplodeBox(theobj, theobj.X, theobj.Y);
  }
}
else if (player.ActiveInventory.ID == 22) // Box Cutter!
{
  player.Walk(theobj.X, theobj.Y, eBlock, eWalkableAreas);
  theobj.SetView(25);
  aBoxcut.Play();
  //theObject.Animate(0, 3, eOnce, eBlock);
  if (sawBox==oboxid)
  {
    oSaw.X=theobj.X;
    oSaw.Y=theobj.Y;
    aDemon.Play();
    DevilPopOut(theobj, theobj.X, theobj.Y);
  }
  if (DynoBox==oboxid)
  {
    oDynomite.X=theobj.X+25;
    oDynomite.Y=theobj.Y;
    theobj.Animate(0, 3, eOnce, eBlock);
    if (oboxid==7)
      {
        torchwalk=true;
      }
  }
  if (DynoBox!=oboxid && sawBox!=oboxid)
  {
    theobj.Animate(0, 3, eOnce, eBlock);
    character[oboxid+8].x=-200;
    if (oboxid==7)
      {
        torchwalk=true;
      }
  }
}
if (player.HasInventory(iSaw) && player.HasInventory(iDynamite))
{
  CanLeaveAttic=true;
}
}

function oDynomite_Interact(Object *theObject, CursorMode mode)
{
  WalkToObjectAndPickup(theObject);
  cMonty.AddInventory(iDynamite);
  AtticToolCount++;
  //gAtticTools.Controls[3].AsButton.NormalGraphic=379; this is outdated, due to the quest system
  //gQuestAttic.Controls[5].AsButton.Visible=true;
  CrossOffList(2, gQuestAttic, CrossDynamite, null);
  if (AtticToolCount==2)
  {
  RestoreWalkableArea(3);
  }
}

function oSaw_Interact(Object *theObject, CursorMode mode)
{
  //WalkToObjectAndPickup(theObject);
  // Move player to the object's location
  cMonty.Walk(theObject.X, theObject.Y, eBlock);  // Use eBlock to wait until the player reaches the destination
  if (ShouldExplode==false)
  {
  cMonty.LockView(20);
  cMonty.Animate(0, 3, eOnce, eBlock);
  aPickup.Play();
  cMonty.AddInventory(iSaw);
  AtticToolCount++;
  if (AtticToolCount==2)
  {
  RestoreWalkableArea(3);
  }
  DevilSkeleton=false;
  RunDevilDust=true;
  cMonty.Animate(1, 3, eOnce, eBlock);
  cMonty.LockView(2);
    }
  //gAtticTools.Controls[2].AsButton.NormalGraphic=379;
  //gQuestAttic.Controls[6].AsButton.Visible=true;
  //gQuestAttic.Controls[7].AsButton.Visible=true;
  //CrossOffList(2, gQuestAttic, CrossSaw01, null);
}

function oTorch_Interact(Object *theObject, CursorMode mode)
{
  if (torchwalk==false)
  {
    cMonty.Say("I can't reach it, there's something blocking me.");
  }
  else
  {
  WalkToObjectAndPickupTall(theObject);
  cMonty.AddInventory(iTorch);
  player.ActiveInventory = inventory[21];
  }
}

function room_AfterFadeIn()
{
  if (SoftLoadAttic==true)
  {
    SoftLoadAttic=false;
    SoftLoad();
  }
  sawBox=Random(5)+2;
  DynoBox=Random(5)+2;
  if (DynoBox==sawBox)
  {
    if (sawBox==6)
    {
      DynoBox=1;
    }
    else
    {
      DynoBox=sawBox+1;
    }
 //   if (DynoBox==0)
 //   {
 //     DynoBox=sawBox+1;
 //     if (DynoBox==7)
 //     {
 //       DynoBox=5;
 //     }
 //     }
 //   }
  }
//  cMonty.SayBackground(String.Format("%d", DynoBox));
//cMonty.Walk(550, 588, eBlock, eWalkableAreas);
//RemoveWalkableArea(3);
}

function oBox01_Interact(Object *theObject, CursorMode mode)
{
if (sawBox==1)
{
  Display("You have found the saw");
}
else
{
  Display("No Saw for you.");
}
}

function oBox02_Interact(Object *theObject, CursorMode mode)
{
if (sawBox==2)
{
  Display("You have found the saw");
}
else
{
  Display("No Saw for you.");
}
}

function oBox03_Interact(Object *theObject, CursorMode mode)
{
if (sawBox==3)
{
  Display("You have found the saw");
}
else
{
  Display("No Saw for you.");
}
}

function oBox04_Interact(Object *theObject, CursorMode mode)
{
if (sawBox==4)
{
  Display("You have found the saw");
}
else
{
  Display("No Saw for you.");
}
}

function oBox05_Interact(Object *theObject, CursorMode mode)
{
if (sawBox==5)
{
  Display("You have found the saw");
}
else
{
  Display("No Saw for you.");
}
}

function oBox06_Interact(Object *theObject, CursorMode mode)
{
if (sawBox==6)
{
  Display("You have found the saw");
}
else
{
  Display("No Saw for you.");
}
}


// BOXES!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
function oBox01_UseInv(Object *theObject, CursorMode mode)
{
  BurnOrOpenBox(theObject, theObject.ID);
}

function oBox02_UseInv(Object *theObject, CursorMode mode)
{
  BurnOrOpenBox(theObject, theObject.ID);
}

function oBox03_UseInv(Object *theObject, CursorMode mode)
{
  BurnOrOpenBox(theObject, theObject.ID);
}

function oBox04_UseInv(Object *theObject, CursorMode mode)
{
  BurnOrOpenBox(theObject, theObject.ID);
}

function oBox05_UseInv(Object *theObject, CursorMode mode)
{
  BurnOrOpenBox(theObject, theObject.ID);
}

function oBox06_UseInv(Object *theObject, CursorMode mode)
{
  BurnOrOpenBox(theObject, theObject.ID);
}

function room_Load()
{
  SetTimer(1, Random(100) + 50);
  SetTimer(2, Random(100) + 100);
  oSpiderDrop.SetView(66);
  oTorch.SetView(41, 0);
  oTorch.Animate(0, 2, eRepeat, eNoBlock);
  if (Puzzle01Stage<4)
  {
    //gAtticTools.Visible=true;
    //gAtticTools.Controls[2].AsButton.NormalGraphic=378;
    //gAtticTools.Controls[3].AsButton.NormalGraphic=378;
    cMonty.ChangeView(2);
    oBox01.Graphic=177;
    oBox02.Graphic=177;
    oBox03.Graphic=177;
    oBox04.Graphic=177;
    oBox05.Graphic=177;
    oBox06.Graphic=177;
    oSaw.X=-100;
    oSaw.SetView(31);
    oDynomite.X=-100;
    oDynomite.SetView(32);

  }
  if (SoftReset==true)
  {
    oCarpetRoll.X=1082;
    oCarpetRoll.Y=638;
    oFoldingTable.X=229;
    oFoldingTable.Y=588;
    oKnife.X=413;
    oKnife.Y=707;
    oTorch.X=1128;
    oTorch.Y=507;
    oTorch.Visible=true;
    oFireGlow.X=933;
    oFireGlow.Y=622;
    oFireGlow.Visible=true;
    cMonty.ChangeRoom(3, 360, 600, eDirectionRight);
  }
  //MakeMouseRun();
}

function repeatedly_execute_always()
{
  if (CanLeaveAttic==false)
  {
    if (player.HasInventory(iSaw) && player.HasInventory(iDynamite))
    {
      CanLeaveAttic=true;
    }
  }
  if (UIMouseMode==true)
  {
    mouse.Mode=2;
  }
  oFireGlow.Visible=oTorch.Visible;
  oFireGlow.X=oTorch.X-150;
  oFireGlow.Y=oTorch.Y+100;
  //cMouse.SayBackground("%d", cMouse.x);
  //cMonty.SayBackground("%d", mouseleft);
  if (cMouse.x==mousexrunto&&cMouse.x>0&&cMouse.x<1280)
  {
    //cMonty.SayBackground("makemouserun GO");
    //MakeMouseRun();
  }
  else if (cMouse.x==mousexrunto&&cMouse.x<=0)
  {
    cMouse.x=-100;
    mouseleft=false;
    SetTimer(2, Random(100) + 200);
  }
  else if (cMouse.x==mousexrunto&&cMouse.x>=1280)
  {
    cMouse.x=1320;
    mouseleft=true;
    SetTimer(2, Random(100) + 200);
  }
  //if (cMouse.x<10)
  //{
  //  cMouse.x=-100;
  //  mouseleft=false;
  //}
  //if (cMouse.x>1240)
  //{
  //  cMouse.x=1320;
  //  mouseleft=true;
  //}
  //if ((cMouse.x<200&&cMouse.x>10)|| (cMouse.x>1100&&cMouse.x<1279))
  //  {
     //cMonty.Think("timer begin");
  //   SetTimer(2, Random(600) + 100);
  //  }
}

function room_RepExec()
{
if (IsTimerExpired(1))
{
  DropSpider();
}

if (IsTimerExpired(2))
{
  //MakeMouseRun();
}
//  if (mouseleft==true)
//  {
//   cMouse.x=1279;
//   MakeMouseRun();
//   SetTimer(2, Random(600) + 500);
//  }
//  else
//  {
//    cMouse.x=1;
//    MakeMouseRun();
//    SetTimer(2, Random(600) + 500);
//  }

if (RunDevilDust==true)
{
  RunDevilDust=false;
  oSaw.SetView(33);
  oSaw.Animate(0, 2, eOnce, eBlock);
  CrossOffList(2, gQuestAttic, CrossSaw01, CrossSaw02);
}
 //exec 6 (all the stuff to autochange the cursor
 Object *hoveredObject = Object.GetAtScreenXY(mouse.x, mouse.y);
 Character *hoveredChar = Character.GetAtScreenXY(mouse.x, mouse.y);
 GUI *hoveredGUI = GUI.GetAtScreenXY(mouse.x, mouse.y);
 //nil
 if (gInventory.Visible || gHelpGUI01.Visible || gHelpGUI02.Visible || gHelpGUI03.Visible || gAchievements.Visible)
  {
  }
 else
 {
 if (mouse.Mode!=4)
 {
   if (hoveredObject == null && hoveredChar == null && hoveredGUI==null)
   {
     mouse.Mode=0;
   }
   else if (hoveredObject != null)
   {
     String description = hoveredObject.GetTextProperty("Description");
     if (description == "Puzzle")
     {
       mouse.Mode=1;
     }
     else if (description == "Pickup")
     {
       mouse.Mode=2;
     }
   }
   else if (hoveredChar!=null)
   {
     String description = hoveredChar.GetTextProperty("Description");
     if (description == "Character")
     {
       mouse.Mode=3;
     }
   }
 }
 else
 {
  if (hoveredObject != null)
  {
   String description = hoveredObject.GetTextProperty("Description");
   if (description == "Pickup")
   {
     mouse.Mode=4;
   }
  }
 }
 }
}

function oBox02_Look(Object *theObject, CursorMode mode)
{
RandomBoxThink();
}

function oBox05_Look(Object *theObject, CursorMode mode)
{
RandomBoxThink();
}

function oBox03_Look(Object *theObject, CursorMode mode)
{
RandomBoxThink();
}

function oBox04_Look(Object *theObject, CursorMode mode)
{
RandomBoxThink();
}

function oBox01_Look(Object *theObject, CursorMode mode)
{
RandomBoxThink();
}

function oBox06_Look(Object *theObject, CursorMode mode)
{
RandomBoxThink();
}

function room_FirstLoad()
{
 //make sure the boxes have their baselines refigured to be higher
 //also makes the box characters align to the boxes, and sets them up to block.
 int boxbaser=2;
 while (boxbaser<8)
 {
   object[boxbaser].Baseline=object[boxbaser].Y-20;
   int graphicW = Game.SpriteWidth[object[boxbaser].Graphic];
   int graphicH = Game.SpriteHeight[object[boxbaser].Graphic];
   character[boxbaser+8].x=object[boxbaser].X+(graphicW/2);
   character[boxbaser+8].y=object[boxbaser].Y;
   character[boxbaser+8].BlockingHeight=50;
   character[boxbaser+8].BlockingWidth=120;
   character[boxbaser+8].ManualScaling=true;
   character[boxbaser+8].Scaling=100;
   character[boxbaser+8].Transparency=100;
   boxbaser++;
 }
 cMonty.Walk(550, 588, eBlock, eWalkableAreas);
 RemoveWalkableArea(3);
 RemoveWalkableArea(2);
 Wait(UIPapersDelaySlow);
 gQuestKitchen.ZOrder=0;
 gQuestKitchen.Visible=true;
 aPapermix.Play();
 Wait(UIPapersDelayFast);
 gQuestLivingRoom.ZOrder=1;
 gQuestLivingRoom.Visible=true;
 aPapermix.Play();
 Wait(UIPapersDelayFast);
 gQuestAttic.ZOrder=2;
 gQuestAttic.Visible=true;
 aPapermix.Play();
 Wait(UIPapersDelaySlow);
 gQuestAttic.Controls[2].AsLabel.Visible=true;
 aWriting.Play();
 Wait(UIPapersDelaySlow);
 gQuestAttic.Controls[3].AsLabel.Visible=true;
 aWriting.Play();
 
 //DropSpider();
//cMonty.Say("My tools must be in some of these boxes.");
}

function oFoldingTable_Interact(Object *theObject, CursorMode mode)
{
WalkToObjectAndPickup(theObject);
cMonty.AddInventory(iFoldingTable);
}

function oCarpetRoll_Interact(Object *theObject, CursorMode mode)
{
WalkToObjectAndPickup(theObject);
cMonty.AddInventory(iCarpetRoll);
}

function oKnife_Interact(Object *theObject, CursorMode mode)
{
WalkToObjectAndPickup(theObject);
cMonty.AddInventory(iExacto);
player.ActiveInventory = inventory[22];
oBox01.SetTextProperty("Description",  "Pickup");
oBox02.SetTextProperty("Description",  "Pickup");
oBox03.SetTextProperty("Description",  "Pickup");
oBox04.SetTextProperty("Description",  "Pickup");
oBox05.SetTextProperty("Description",  "Pickup");
oBox06.SetTextProperty("Description",  "Pickup");
}

function oSpiderDrop_Interact(Object *theObject, CursorMode mode)
{
cMonty.Think("I don't think I can reach it, or know why I'd want to.");
}

