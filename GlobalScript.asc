// main global script file

//=============================================================================
// INITIALIZATION
//=============================================================================

int originalSpritesLeft[8];
int originalSpritesRight[8];

// set default game options

function set_default_options()
{
  System.Volume = 100;
  sldAudio.Value = System.Volume;
  sldSpeed.Value = 40;
  SetGameSpeed(40);

  if (IsSpeechVoxAvailable())
  {
     Speech.VoiceMode = eSpeechVoiceAndText;
     btnVoice.Text = "Voice and Text";
     sldVoice.Value = 255;
     SetSpeechVolume(255);
  }

  if (System.SupportsGammaControl)
  {
    System.Gamma = 100;
    sldGamma.Value = 100;
  }
  Game.SpeechFont= eFontSuperComic;
}

// initialize gPanel
function initialize_control_panel()
{
  if (!IsSpeechVoxAvailable())
  {
    // hide the speech controls, if speech is not available
    lblVoice.Visible = false;
    btnVoice.Visible = false;
    sldVoice.Visible = false;
  }

  if (!System.SupportsGammaControl) {
    // hide the gamma control, if not supported
    sldGamma.Visible = false;
    lblGamma.Visible = false;
  }

  set_default_options();
}

// called when the game starts, before the first room is loaded
function game_start()
{
  // initialize gPanel controls
  initialize_control_panel();

  // set KeyboardMovement movement mode
  KeyboardMovement.Mode = eKeyboardMovementModeTapping;

  // set KeyboardMovement keys
  //KeyboardMovement.KeyUp = eKeyW;
  //KeyboardMovement.KeyDown = eKeyS;
  //KeyboardMovement.KeyLeft = eKeyA;
  //KeyboardMovement.KeyRight = eKeyD;

  // Auto-save on the save slot 999
  SetRestartPoint();
}

//=============================================================================
// Scripts
//=============================================================================

function CheckDeathCount()
{
  LabelNumDeaths.Text=String.Format("%d", DeathCount);
  if (DeathCount==10)
  {
    AchievementNew=true;
    iACH08.Graphic=432;
  }
  if (DeathCount==100)
  {
    AchievementNew=true;
    iACH09.Graphic=432;
  }
}

function SayTypewriterStyle(Character* sayingcharacter, String message, int delay)
{
    int length = message.Length;
    String partialMessage;
    Overlay* overlay = null;

    for (int i = 0; i < length; i++) {
        partialMessage = message.Substring(0, i + 1);
        
        // Remove the old overlay, if it exists
        if (overlay != null) {
            overlay.Remove();
        }
        
        // Create a new overlay with the updated text (x, y, width, eFontSpeech, fontColor, "Your Text Here")
        overlay = Overlay.CreateTextual(sayingcharacter.x, sayingcharacter.y - 200, 200, eFontNormal, 16, partialMessage);
        
        Wait(delay); // Delay between each letter
    }
    
    Wait(200);  // Optional pause to display the completed text
    if (overlay != null) {
        overlay.Remove(); // Clean up after displaying the full text
    }
}

//=============================================================================
// Common GUI functions
//=============================================================================


// hide the icon bar and show a GUI
function open_gui(GUI* gui_to_open)
{
  if (gui_to_open != gInventory)
  {
    lblOverHotspot.Visible = false;
  }

  gIconbar.Visible = false;
  mouse.UseModeGraphic(eModePointer);
  gui_to_open.Visible = true;
}

// hide the GUI and show the icon bar
function close_gui(GUI* gui_to_close)
{
  gui_to_close.Visible = false;
  mouse.UseDefaultGraphic();
  lblOverHotspot.Visible = true;
  gIconbar.Visible = true;
}

// hide a GUI, based on a GUI control
function close_owning_gui(GUIControl* control)
{
  close_gui(control.OwningGUI);
}

// hide a GUI directly from an OnClick event
function close_gui_onclick(GUIControl *control, MouseButton button)
{
  if (control.OwningGUI==gInventory)
  {
    GUIAutoClose=false;
    close_owning_gui(control);
    open_gui(gChestOpen05);
    Wait(WaitGUI);
    close_gui(gChestOpen05);
    open_gui(gChestOpen04);
    Wait(WaitGUI);
    close_gui(gChestOpen04);
    open_gui(gChestOpen03);
    Wait(WaitGUI);
    close_gui(gChestOpen03);
    open_gui(gChestOpen02);
    Wait(WaitGUI);
    close_gui(gChestOpen02);
    open_gui(gChestOpen01);
    Wait(WaitGUI);
    close_gui(gChestOpen01);
  }
  else
  {
    close_owning_gui(control);
  }
}

function show_inventory_window()
{
  mouse.Mode = eModeInteract;
  open_gui(gInventory);
}

function show_save_game_dialog()
{
  // get the list of save games
  lstSaveGamesList.FillSaveGameList();

  if (lstSaveGamesList.ItemCount > 0)
  {
    // if there is at least one, set the default text
    // to be the first game's name
    txtNewSaveName.Text = lstSaveGamesList.Items[0];
  }
  else
  {
    // no save games yet, so default to empty text
    txtNewSaveName.Text = "";
  }

  open_gui(gSaveGame);
}

function show_restore_game_dialog()
{
  lstRestoreGamesList.FillSaveGameList();
  open_gui(gRestoreGame);
}

//=============================================================================
// ICONBAR
//=============================================================================

function btnIconSave_Click(GUIControl *control, MouseButton button)
{
  show_save_game_dialog();
}

function btnIconLoad_Click(GUIControl *control, MouseButton button)
{
  show_restore_game_dialog();
}

function btnIconPanel_Click(GUIControl *control, MouseButton button)
{
  open_gui(gPanel);
}

function btnIconExit_Click(GUIControl *control, MouseButton button)
{
  open_gui(gExitGame);
}

//=============================================================================
// INVENTORY WINDOW
//=============================================================================

function btnInvUp_Click(GUIControl *control, MouseButton button)
{
  invCustom.ScrollUp();
}

function btnInvDown_Click(GUIControl *control, MouseButton button)
{
  invCustom.ScrollDown();
}

function btnInvSelect_Click(GUIControl *control, MouseButton button)
{
  // switch to the interact cursor
  mouse.Mode = eModeInteract;
  // ...but override the appearance to look like the arrow
  mouse.UseModeGraphic(eModePointer);
}

function btnIconInv_Click(GUIControl *control, MouseButton button)
{
  if (FirstChest==true)
  {
    gIconbar.Controls[0].AsButton.NormalGraphic=2120;
    FirstChest=false;
  }
  open_gui(gChestOpen01);
  Wait(WaitGUI);
  close_gui(gChestOpen01);
  open_gui(gChestOpen02);
  Wait(WaitGUI);
  close_gui(gChestOpen02);
  open_gui(gChestOpen03);
  Wait(WaitGUI);
  close_gui(gChestOpen03);
  open_gui(gChestOpen04);
  Wait(WaitGUI);
  close_gui(gChestOpen04);
  open_gui(gChestOpen05);
  Wait(WaitGUI);
  close_gui(gChestOpen05);
  show_inventory_window();
}

function btnIconCurInv_Click(GUIControl *control, MouseButton button)
{
  if (player.ActiveInventory != null)
  {
    mouse.Mode = eModeUseinv;
  }
}

//=============================================================================
// CONTROL PANEL
//=============================================================================

function btnSave_OnClick(GUIControl *control, MouseButton button)
{
  close_owning_gui(control);
  Wait(1);
  btnIconSave_Click(btnIconSave, eMouseLeft);
}

function btnAbout_OnClick(GUIControl *control, MouseButton button)
{
  Display("%s\nAGS %s", Game.Name, System.Version);
}

function btnQuit_OnClick(GUIControl *control, MouseButton button)
{
  close_owning_gui(control);
  open_gui(gExitGame);
}

function btnLoad_OnClick(GUIControl *control, MouseButton button)
{
  close_owning_gui(control);
  Wait(1);
  btnIconLoad_Click(btnIconLoad, eMouseLeft);
}

function sldAudio_OnChange(GUIControl *control)
{
  System.Volume = sldAudio.Value;
}

function sldVoice_OnChange(GUIControl *control)
{
  SetSpeechVolume(sldVoice.Value);
}

function btnVoice_OnClick(GUIControl *control, MouseButton button)
{
  if (Speech.VoiceMode == eSpeechVoiceAndText)
  {
    Speech.VoiceMode = eSpeechVoiceOnly;
    btnVoice.Text = "Voice only";
  }
  else if (Speech.VoiceMode == eSpeechVoiceOnly)
  {
    Speech.VoiceMode = eSpeechTextOnly;
    btnVoice.Text = "Text only";
  }
  else if (Speech.VoiceMode == eSpeechTextOnly)
  {
    Speech.VoiceMode = eSpeechVoiceAndText;
    btnVoice.Text = "Voice and Text";
  }
}

function sldGamma_OnChange(GUIControl *control)
{
  System.Gamma = sldGamma.Value;
}

function btnDefault_OnClick(GUIControl *control, MouseButton button)
{
  set_default_options();
}

function sldSpeed_OnChange(GUIControl *control)
{
  SetGameSpeed(sldSpeed.Value);
}

//=============================================================================
// SAVE / LOAD DIALOGS
//=============================================================================

int find_save_slot(String name)
{
  bool slots[] = new bool[999];
  int slots_used = 0;

  // record which slots are occupied already, 
  // if the types save name matches any existing one, then use that
  for (int i = 0; i < lstSaveGamesList.ItemCount; i++)
  {
    if (lstSaveGamesList.Items[i] == name)
    {
      // found existing save with matching name
      return lstSaveGamesList.SaveGameSlots[i];
    }

    // remember which slots are already taken
    slots[lstSaveGamesList.SaveGameSlots[i]] = true;
    slots_used++;
  }
  
  // current version of AGS has a limit of 50 save slots
  // that may be displayed in the ListBox at the same time
  if (slots_used >= 50)
  {
    return -1;
  }

  // find first free save slot, starting with slot 1 (for "cosmetic" purposes)
  for (int i = 1; i < 999; i++)
  {
    if (!slots[i])
    {
      return i;
    }
  }

  // no free slots found
  return -1;
}

function btnSaveGame_OnClick(GUIControl *control, MouseButton button)
{
  int gameSlotToSaveInto = find_save_slot(txtNewSaveName.Text);

  if (gameSlotToSaveInto < 0)
  {
    Display("Save slots limit of 50 is reached, delete some of the existing saves first!");
  }
  else
  {
    SaveGameSlot(gameSlotToSaveInto, txtNewSaveName.Text);
    close_owning_gui(control);
  }
}

function btnRestoreGame_OnClick(GUIControl *control, MouseButton button)
{
  if (lstRestoreGamesList.SelectedIndex >= 0)
  {
    RestoreGameSlot(lstRestoreGamesList.SaveGameSlots[lstRestoreGamesList.SelectedIndex]);
  }

  close_owning_gui(control);
}

function lstSaveGamesList_OnSelectionCh(GUIControl *control)
{
  txtNewSaveName.Text = lstSaveGamesList.Items[lstSaveGamesList.SelectedIndex];
}

function txtNewSaveName_OnActivate(GUIControl *control)
{
  // pressing Return in the text box simulates clicking the save button
  btnSaveGame_OnClick(control, eMouseLeft);
}

function btnDeleteSave_OnClick(GUIControl *control, MouseButton button)
{
  if (lstSaveGamesList.SelectedIndex >= 0)
  {
    DeleteSaveSlot(lstSaveGamesList.SaveGameSlots[lstSaveGamesList.SelectedIndex]);
    lstSaveGamesList.FillSaveGameList();
  }
}

//=============================================================================
// RESTART DIALOG
//=============================================================================

function btnRestart_OnClick(GUIControl *control, MouseButton button)
{
  close_owning_gui(control);
  open_gui(gRestart);
}

function btnRestartYes_OnClick(GUIControl *control, MouseButton button)
{
  RestartGame();
}

//=============================================================================
// QUIT DIALOG
//=============================================================================

function btnConfirmedQuit_OnClick(GUIControl *control, MouseButton button)
{
  QuitGame(0);
}

//=============================================================================
// PLAYER INPUT
//=============================================================================

// called when a key is pressed
function on_key_press(eKeyCode keycode, int mod)
{
  // check for Escape first, so it can be used on GUIs that pause the game
  if (keycode == eKeyEscape)
  {
    if (gInventory.Visible)
    {
      // Escape will close the restore game dialog
      close_gui(gInventory);
    }
    else if (gPanel.Visible)
    {
      // Escape will turn the panel off
      close_gui(gPanel);
    }
    else if (gSaveGame.Visible)
    {
      // Escape will close the save game dialog
      close_gui(gSaveGame);
    }
    else if (gRestoreGame.Visible)
    {
      // Escape will close the restore game dialog
      close_gui(gRestoreGame);
    }
    if (gRestart.Visible)
    {
      // Escape will cancel a restart
      close_gui(gRestart);
    }
    else if (gExitGame.Visible)
    {
      // Escape will cancel exiting the game
      close_gui(gExitGame);
    }
    else
    {
      // Escape will turn the panel on
      open_gui(gPanel);
    }
  }
  else if (IsGamePaused() || !IsInterfaceEnabled())
  {
    // game paused, so don't react to any keypresses
    keycode = 0;
  }
  else if (keycode == eKeyQ && (mod & eKeyModCtrl))
  {
    // Ctrl-Q will quit the game
    open_gui(gExitGame);
  }
  else if (keycode == eKeyF5)
  {
    // F5 will prompt to save a game
    show_save_game_dialog();
  }
  else if (keycode == eKeyF7)
  {
    // F7 will prompt to save a game
    show_restore_game_dialog();
  }
  else if (keycode == eKeyF9)
  {
    // F9 will prompt to restart the game
    open_gui(gRestart);
  }
  else if (keycode == eKeyF12)
  {
    // F12 will save a screenshot to the save game folder
    SaveScreenShot("screenshot.pcx");
  }
  else if (keycode == eKeyReturn)
  {
    if (gRestart.Visible)
    {
      // Enter confirms a restart
      RestartGame();
    }
  }
  else if (keycode == eKeyTab)
  {
    // Tab opens the inventory
    show_inventory_window();
  }
  else if (mod & eKeyModCtrl)
  {
    if (keycode == eKeyS)
    {
      // Ctrl-S will give the player all defined inventory items
      Debug(0, 0);
    }
    else if (keycode == eKeyV)
    {
      // Ctrl-V will show game engine version and build date
      Debug(1, 0);
    }
    else if (keycode == eKeyA)
    {
      // Ctrl-A will show walkable areas
      Debug(2, 3);
    }
    else if (keycode == eKeyX)
    {
      // Ctrl-X will let the player teleport to any room
      Debug(3, 0);
    }
  }
  else if (mod & eKeyModShift)
  {
    if (keycode==eKey4)
    {
      cMonty.ChangeRoom(4, 570, 1350);
      cMonty.AddInventory(iLegs);
    }
  }
}

function handle_room_click(MouseButton button)
{
  if (button == eMouseLeft)
  {
    // left-click, so try using the current mouse cursor mode at this position
    Room.ProcessClick(mouse.x, mouse.y, mouse.Mode );
  }
  else if (button == eMouseRight || button == eMouseWheelSouth){
    // right-click or mouse wheel down will cycle the mouse cursor mode forwards
    mouse.SelectNextMode();
  }
  else if (button == eMouseMiddle)
  {
    // middle-click makes the character walk to clicked area, regardless of cursor mode
    Room.ProcessClick(mouse.x, mouse.y, eModeWalkto);
  }
  else if (button == eMouseWheelNorth)
  {
    // mouse wheel up will cycle the cursor mode backwards
    mouse.SelectPreviousMode();
  }
}

function ShutInventory()
{
  close_gui(gInventory);
    open_gui(gChestOpen05);
    Wait(WaitGUI);
    close_gui(gChestOpen05);
    open_gui(gChestOpen04);
    Wait(WaitGUI);
    close_gui(gChestOpen04);
    open_gui(gChestOpen03);
    Wait(WaitGUI);
    close_gui(gChestOpen03);
    open_gui(gChestOpen02);
    Wait(WaitGUI);
    close_gui(gChestOpen02);
    open_gui(gChestOpen01);
    Wait(WaitGUI);
    close_gui(gChestOpen01);
  
}

function handle_inventory_click(MouseButton button)
{
  // InventoryItem.GetAtScreenXY could return null here
  // so using game.inv_activated instead is a safer option
  InventoryItem* item = inventory[game.inv_activated];
  
  if (button == eMouseLeftInv)
  {
    if (mouse.Mode == eModeInteract)
    {
      // interact mode selects an inventory item
      //THIS IS BRIAN'S CODE! It makes the achievements change!
      if (item==iACH01 && item.Graphic==431)
      {
        item.Graphic=422;
      }
      else if(item==iACH02 && item.Graphic==431)
      {
        item.Graphic=423;
      }
      else if(item==iACH03 && item.Graphic==432)
      {
        item.Graphic=424;
      }
      else if(item==iACH04 && item.Graphic==432)
      {
        item.Graphic=425;
      }
      else if(item==iACH05 && item.Graphic==432)
      {
        item.Graphic=426;
      }
      else if(item==iACH06 && item.Graphic==432)
      {
        item.Graphic=427;
      }
      else if(item==iACH07 && item.Graphic==432)
      {
        item.Graphic=428;
      }
      else if(item==iACH08 && item.Graphic==432)
      {
        item.Graphic=429;
      }
      else if(item==iACH09 && item.Graphic==432)
      {
        item.Graphic=430;
      }
      else if (item==iACH10 && item.Graphic==443)
      {
        item.Graphic=442;
      }
      player.ActiveInventory = item;
    }
    else if (mouse.Mode == eModeUseinv)
    {
      if (item.ID != player.ActiveInventory.ID)
      {
        // use one item on another
        item.RunInteraction(eModeUseinv);
      }
    }
    else
    {
      // otherwise run corresponding interaction (LookAt, etc)
      item.RunInteraction(mouse.Mode);
    }
  }
  else
  {
    // right click is always "Look At"
    item.RunInteraction(eModeLookat);
  }
}

// called when a mouse button is clicked
function on_mouse_click(MouseButton button)
{
  if (button == eMouseLeftInv || button == eMouseRightInv || button == eMouseMiddleInv)
  {
    handle_inventory_click(button);
  }
  // game is paused, then don't process mouse clicks inside the room
  else if (!IsGamePaused())
  {
    handle_room_click(button);
  }
}

//=============================================================================
// GAME EVENTS
//=============================================================================

// called on every game cycle, except when the game is blocked
function repeatedly_execute()
{
  //debugging gui!!!
  gDebuggui.Controls[3].AsLabel.Text = String.Format("%d", Puzzle01Stage);
  String result;
  if (ShouldExplode) {
  result = "true";
  }
  else {
  result = "false";
  }
  gDebuggui.Controls[1].AsLabel.Text = result;
  //end debugging
  if (ShouldCountTimer==true)
  {
  GameSpeedFrames++;
  if (GameSpeedFrames==40)
  {
    GameSpeedFrames=0;
    GameSpeedSeconds++;
    LabelSeconds.Text=String.Format("%d", GameSpeedSeconds);
    //LabelSeconds=string.format(%d, GameSpeedSeconds);
    //gAchievements
    if (GameSpeedSeconds==60)
    {
      GameSpeedSeconds=0;
      GameSpeedMinutes++;
      LabelMinutes.Text=String.Format("%d", GameSpeedMinutes);
    }
  }
  }
  
  
  if (AchievementNew==true)
  {
    AchievementNewWaitInt++;
    if (AchievementNewWaitInt<10)
    {
      gIconbar.Controls[8].AsButton.NormalGraphic=434;
    }
    else
    {
      gIconbar.Controls[8].AsButton.NormalGraphic=421;
    }
    if (AchievementNewWaitInt>20)
    {
      AchievementNewWaitInt=0;
    }
  }
  if (FirstChest==true)
  {
    AchievementNewWaitInt++;
    if (AchievementNewWaitInt<10)
    {
      gIconbar.Controls[0].AsButton.NormalGraphic=515;
    }
    else
    {
      gIconbar.Controls[0].AsButton.NormalGraphic=2120;
    }
    if (AchievementNewWaitInt>20)
    {
      AchievementNewWaitInt=0;
    }
  }
  if (cMonty.View==2 && cMonty.Animating==false)
  {
    //cMonty.LockView(39);
  }
  //else cMonty.LockView(2);
  
 if (cMonty.View==4 && cMonty.Loop==0 && (cMonty.Frame==2 || cMonty.Frame==4 || cMonty.Frame == 6))
 {
   //Display("hi");
   aScoop_mixdown.Play();
 }
 //if (cMonty.View==2 && cMonty.Frame==3)
 //{
 //  aWalk.Play();
 //}
 
 if (gInventory.Visible==true)
 {
   if (mouse.y<gInventory.Y+575 && mouse.y>gInventory.Y && mouse.x<gInventory.X+600 && mouse.x>gInventory.X)
   {
     GUIAutoClose=true;
   }
   if (GUIAutoClose==true && (mouse.y<gInventory.Y || mouse.y>gInventory.Y+575 || mouse.x<gInventory.X || mouse.x>gInventory.X+600))
   {
     GUIAutoClose=false;
     ShutInventory();
   }
 }
 if (gAchievements.Visible==true)
 {
   //cMonty.SayBackground("hi");
   mouse.Mode=2;
 }
}

// called on every game cycle, even when the game is blocked
function repeatedly_execute_always()
{
  if (gQuestLivingRoom.Visible==true || gQuestAttic.Visible==true || gQuestKitchen.Visible==true)
  {
    UIMouseMode=true;
  }
  if (gQuestLivingRoom.Visible==false && gQuestAttic.Visible==false && gQuestKitchen.Visible==false)
  {
    UIMouseMode=false;
  }
  if (cMonty.View==2 && cMonty.Frame==3 && WalkSwitch==false)
 {
   WalkSwitch=true;
   aWalk.Play();
 }
 else if (cMonty.View==2 && cMonty.Frame==3)
 {
   WalkSwitch=false;
 }
 if (cHuman01.View==12 && (cHuman01.Frame==2 || cHuman01.Frame==6))
 {
   aWalk.Play(eAudioPriorityNormal);
 }
 if (Game.GetLocationName(mouse.x, mouse.y)=="Unlit Candles")
 {
   //Display;
 }
 if (gIconbar.Visible && mouse.y<66)
 {
   mouse.Mode=6; //this changes the cursor to the cool pointer cursor - it's only based on position and if the icon bar is visible.
 }
 Timerface++; //the following code handles the timing and programming of switching JUST the left/right walk to a funny smile tongue animation.
 //I also need the int variables called at the TOP of this globalscript.
 if (Timerface==TimerFaceLimit)
 {
  for (int i = 0; i < 8; i++)
  {
  ViewFrame*vf1 = Game.GetViewFrame(2, 1, i+1);
  originalSpritesLeft[i]=vf1.Graphic;
  vf1.Graphic=546+i;
  }
  for (int i = 0; i < 8; i++)
  {
  ViewFrame*vf2 = Game.GetViewFrame(2, 2, i+1);
  originalSpritesRight[i]=vf2.Graphic;
  vf2.Graphic=546+i;
  }
 }
 if (Timerface==TimerFaceLimit+90)
 {
   Timerface=0;
   TimerFaceLimit=Random(200)+200;
   for (int i = 0; i < 8; i++)
   {
    ViewFrame* vf1 = Game.GetViewFrame(2, 1, i+1);
    vf1.Graphic = originalSpritesLeft[i]; // put the original sprite back
   }
   for (int i = 0; i < 8; i++)
   {
    ViewFrame* vf2 = Game.GetViewFrame(2, 2, i+1);
    vf2.Graphic = originalSpritesRight[i]; // put the original sprite back
   }
 }
}

// Called when a dialog script line "run-script" is processed
function dialog_request(int param)
{
  if (param == 1)
  {
    cHuman01.LockView(12);
    cHuman01.Walk(1110, 689, eBlock);
    cHuman01.LockView(50);
    cHuman01.SpeechView=51;
    cHuman01.Say("Just sign here, One eyez.");
    cHuman01.Say("I'm sure there's a pen around here SOMEwherez.");
    Puzzle01Stage = 1;
  }
}

// called when processclick wasn't handled anywhere else
function unhandled_event (int what, int type)
{
  if (what == 1) // Unhandled events for HOTSPOTS
  {
    if (type == 1) // look
    {
      player.Say("I see nothing special about it.");
    }
    else if (type == 2) // interact
    {
      player.Say("I can't do anything with it.");
    }
    else if (type == 3) // use inv on
    {
      player.Say("That won't do anything.");
    }
    else if (type == 4) // talk to
    {
      player.Say("I don't think it's going to talk back.");
    }
    else if (type == 7) // pick up
    {
      player.Say("I'm not sure I should be taking it.");
    }
  }
  else if (what == 2) // Unhandled events for OBJECTS
  {
    if (type == 0) // look
    {
      player.Say("Looks alright.");
    }
    else if (type == 1) // interact
    {
      player.Say("I'm not sure how to use it.");
    }
    else if (type == 2) // talk to
    {
      player.Say("I don't think it's going to answer me.");
    }
    else if (type == 3) // use inv on
    {
      player.Say("That's a funny idea.");
    }
    else if (type == 5) // pick up
    {
      player.Say("I don't want to have it.");
    }
  }
  else if (what == 3) // Unhandled events for CHARACTERS
  {
    if (type == 0) // look
    {
      player.Say("Hm.");
    }
    else if (type == 1) // interact
    {
      player.Say("Eh?");
    }
    else if (type == 2) // talk to
    {
      player.Say("Got nothing to say.");
    }
    else if (type == 3) // use inv on
    {
      player.Say("I don't think I should give that away.");
    }
    else if (type == 5) // pick up
    {
      player.Say("I'm not sure they would be compliant.");
    }
  }
  else if (what == 5) // Unhandled events for INVENTORY ITEMS
  {
    if (type == 0) // look
    {
      player.Say("It's just some junk in my inventory.");
    }
    else if (type == 1) // interact
    {
      player.Say("Er, no?");
    }
    else if (type == 3) // use inv on
    {
      player.Say("That's ridiculous.");
    }
  }
}

//=============================================================================
// Global interactions: Characters, Inventory items, ...
//=============================================================================

function CraftItems(int craftingtype)
{
  gCraftAnimGUI.SetPosition(mouse.x, mouse.y);
  gCraftAnimGUI.Visible = true;
  if (craftingtype ==1)
  {
    cMonty.LoseInventory(iHeliumTank);
    cMonty.LoseInventory(iEyes);
    gCraftAnimGUI.BackgroundGraphic=165;
    Wait(WaitGUIAnim);
    gCraftAnimGUI.BackgroundGraphic=166;
    Wait(WaitGUIAnim);
    gCraftAnimGUI.BackgroundGraphic=167;
    Wait(WaitGUIAnim);
    gCraftAnimGUI.BackgroundGraphic=168;
    Wait(WaitGUIAnim);
    gCraftAnimGUI.BackgroundGraphic=169;
    Wait(WaitGUIAnim);
    gCraftAnimGUI.BackgroundGraphic=170;
    Wait(WaitGUIAnim);
    gCraftAnimGUI.BackgroundGraphic=171;
    Wait(WaitGUIAnim);
    gCraftAnimGUI.BackgroundGraphic=172;
    Wait(WaitGUIAnim);
    gCraftAnimGUI.BackgroundGraphic=173;
    Wait(WaitGUIAnim);
    gCraftAnimGUI.BackgroundGraphic=174;
    Wait(WaitGUIAnim);
    gCraftAnimGUI.BackgroundGraphic=175;
    Wait(WaitGUIAnim);
    gCraftAnimGUI.BackgroundGraphic=176;
    Wait(WaitGUIAnim);
    cMonty.AddInventory(iEyeBalloons);
    cMonty.LoseInventory(iHeliumTank);
    cMonty.LoseInventory(iEyes);
    gCraftAnimGUI.Visible=false;
    Mouse.Mode=2;
  }
}


function cEgo_Look(Character *thisCharacter, CursorMode mode)
{
  Display("Damn, I'm looking good!");
}

function cEgo_Interact(Character *thisCharacter, CursorMode mode)
{
  Display("You rub your hands up and down your clothes.");
}

function cEgo_Talk(Character *thisCharacter, CursorMode mode)
{
  Display("Talking to yourself is a sign of madness!");
}

function gInventory_OnClick(GUI *theGui, MouseButton button)
{

}

function RandomBoxThink()
{
  int randobox = Random(5);
  if (randobox==0)
  {
    cMonty.Think("I wonder if my tools are in here");
  }
  else if (randobox==1)
  {
    cMonty.Think("I hope there's not a demon in any of these");
  }
  else if (randobox==2)
  {
    cMonty.Think("what a 'smashing' looking box");
  }
  else if (randobox==3)
  {
    cMonty.Think("shall I open it... or BURN it?");
  }
    else if (randobox==4)
  {
    cMonty.Think("eeny, meeny, miney, moe...");
  }
  else if (randobox==2)
  {
    cMonty.Think("which box has the dynamite, which box has the saw?");
  }
}

function CrossOffList(int roomnum, GUI* mygui, Button* mycrossoff,  Button* mycrossofff)
{
  Wait(UIPapersDelaySlow);
  mygui.Visible=true;
  aPapermix.Play();
  Wait(UIPapersDelaySlow);
  mycrossoff.Visible=true;
  aWriting.Play();
  if (mycrossofff!=null)
  {
    Wait(UIPapersDelayFast);
    mycrossofff.Visible=true;
    aWriting.Play();
  }
}

function WalkToObjectAndPickupTall(Object *obj)
{
  // Move player to the object's location
  cMonty.Walk(obj.X, obj.Y, eBlock);  // Use eBlock to wait until the player reaches the destination
  cMonty.LockView(43);
  cMonty.Animate(0, 3, eOnce, eBlock);
  aPickup.Play();
  obj.X=-200;
  cMonty.Animate(1, 3, eOnce, eBlock);
  cMonty.LockView(2);
}

function WalkToObjectAndPickup(Object *obj)
{
    // Move player to the object's location
    cMonty.Walk(obj.X, obj.Y, eBlock);  // Use eBlock to wait until the player reaches the destination
    if (ShouldExplode==false)
    {
    cMonty.LockView(20);
    cMonty.Animate(0, 3, eOnce, eBlock);
    aPickup.Play();
    //if (Object.GetByName==oSaw)
    //{
    //  DevilSkeleton=false;
    //  RunDevilDust=true;
    //  cMonty.Animate(1, 3, eOnce, eBlock);
    //  cMonty.LockView(2);
    //}
    //else
    //{
    obj.X=-200;
    cMonty.Animate(1, 3, eOnce, eBlock);
    cMonty.LockView(2);
    //}
    }
 }
 
 function GoToObjectAndPickup(Object *pickup)
 {
   cMonty.Walk(pickup.X, pickup.Y, eBlock);
   pickup.Visible=false;
   numPresents++;
   String message = String.Format("You have: %d Presents", numPresents);
   cMonty.Say(message);
 }

function cHuman01_UseInv(Character *theCharacter, CursorMode mode)
{
  if (player.ActiveInventory.ID == 6) //Pen!
  {
    if (Puzzle01Stage==1) //makes sure that you can't gouge his eyes till he's inside.
    {
      cMonty.Walk((theCharacter.x-70),  theCharacter.y+10, eBlock);
      cMonty.LockView(4);
      aScoop_mixdown.Play();
      cMonty.Animate(0, 7, eOnce, eBlock);
      //Wait(50);
      EyeballAnim=true; //eyeball animation triggers room 3's "on tick".
      cHuman01.LockView(16);
      cHuman01.SetWalkSpeed(10, 10);
      cHuman01.Walk(HumanWalkAX, HumanWalkAY, eNoBlock, eAnywhere);
      HumWalkUp=1;
      //cHuman01.Animate(0, 10, eRepeat, eNoBlock);
      cMonty.UnlockView();
      //cMonty.AddInventory(iEyes);
      cMonty.LoseInventory(iSpoon);
      Puzzle01Stage = 2;
      //cMonty.Think("I can grab the Helium and he won't even know...");
    }
    else
    {
      cHuman01.Say("Hey invite a guy inside first...");
    }
  }
  else if (player.ActiveInventory.ID==19) // Candles!
  {
    if (cHuman01.View == 3 || cHuman01.View==16 || cHuman01.View==50)
    {
    cHuman01.SpeechView=-1;
    cHuman01.Say("Shove those in your eyeholes, yukface.");
    if (cHuman01.View==16 && cHuman01.Loop==2)
    {
      cHuman01.Walk(HumanWalkBX, HumanWalkBY, eNoBlock);
    }
    else if (cHuman01.View==16)
    {
      cHuman01.Walk(HumanWalkAX, HumanWalkAY, eNoBlock);
    }
    }
    else if (cHuman01.View == 18)
    {
      cMonty.Say("Yuk, I don't want to stick the candles in there.");
    }
  }
  else if (player.ActiveInventory.ID==24 && cHuman01.View==18) // skull candles,  is funny.
  {
    cMonty.Walk(cHuman01.x-70, cHuman01.y, eBlock, eWalkableAreas);
    cMonty.LockView(43);
    cMonty.Animate(0, 3, eOnce, eBlock);
    skullhead.X=cHuman01.x-15;
    skullhead.Y=cHuman01.y-130;
    cMonty.Animate(1, 3, eOnce, eBlock);
    cMonty.UnlockView();
    cMonty.LoseInventory(iSkullCandles);
    cMonty.Say("This is kinda silly but he looks better this way.");
    //gQuestLivingRoom.Controls[13].AsButton.Visible=true;
    //gQuestLivingRoom.Controls[14].AsButton.Visible=true;
    CrossOffList(1, gQuestLivingRoom, CrossFunny01, CrossFunny02);
  }
  else if (player.ActiveInventory.ID == 8) // SAW!
  {
    if (cHuman01.View == 16)
    {
      cHuman01.StopMoving();
      HeadRoll=true;
      cMonty.Walk(theCharacter.x-70,  theCharacter.y+10, eBlock);
      cMonty.LockView(4);
      aSaw.Play();
      cMonty.Animate(1, 5, eOnce, eBlock);
      cHuman01.LockView(18);
      MakeBloodPuddle=true;
      cHuman01.Animate(0, 2, eRepeat, eNoBlock);
      cMonty.UnlockView();
      cMonty.LoseInventory(iSaw);
      Puzzle01Stage = 5;
    }
    else if (cHuman01.View == 3)
    {
      player.Say("Not yet... I think I need to harvest some balloon-shaped things.");
    }
    
  }
    else if (player.ActiveInventory.ID == 11) //DynaMITE!
  {
    if (cHuman01.View == 18)
    {
      DeathCount++;
      CheckDeathCount();
      if (ACHDyno2==false)
      {
        AchievementNew=true;
        ACHDyno2=true;
        iACH06.Graphic=432;
      }
      cMonty.Walk(theCharacter.x-70,  theCharacter.y+10, eBlock);
      cHuman01.LockView(8);
      cMonty.SayBackground("Oh no! I need a timer...");
      aExplode_Long.Play();
      cHuman01.Animate(0, 5, eOnce, eNoBlock);
      Wait(20);
      cMonty.LockView(28);
      cMonty.Animate(0, 2, eOnce, eBlock);
      //cMonty.x=300;
      //cMonty.y=650;
      cHuman01.LockView(18);
      cHuman01.Animate(0, 2, eRepeat, eNoBlock);
      cMonty.UnlockView();
      //cMonty.LoseInventory(iDynamite);
      //theCharacter.SetTextProperty("Description", "Pickup");
      //Puzzle01Stage = 6;
      cMonty.ChangeRoom(3, 300, 650, eDirectionRight);
    }
    else
    {
      player.Say("Not yet. Patience, my little monster.");
    }
    
  }
  else if (player.ActiveInventory.ID==26) //timebomb!
  {
    if (cHuman01.View == 18)
    {
      cMonty.Walk(theCharacter.x-70,  theCharacter.y+10, eBlock);
      cHuman01.LockView(46);
      cMonty.Walk(300, 650, eBlock, eWalkableAreas);
      aExplode_Long.Play();
      TshirtBlowUp=true;
      cHuman01.Animate(0, 4, eOnce, eBlock);
      MakeBigBloodPuddle=true;
      cMonty.LoseInventory(iTimerDyno);
      theCharacter.SetTextProperty("Description", "Pickup");
      Puzzle01Stage = 6;
      //make tshirt in room animate.
    }
  }
}
function cHuman01_Interact(Character *theCharacter, CursorMode mode)
{
  if (theCharacter.View == 46)
  {
    cMonty.Walk((cHuman01.x-70),  cHuman01.y+10, eBlock);
    cMonty.LockView(43);
    cMonty.Animate(0, 3, eOnce, eBlock);
    cHuman01.LockView(9);
    cMonty.Animate(1, 3, eOnce, eBlock);
    cMonty.UnlockView();
    Puzzle01Stage=7;
    cMonty.AddInventory(iIntestine);
    cHuman01.SetWalkSpeed(50, 50);
    cHuman01.Walk(257, 546, eBlock, eAnywhere);
  }
  else if (theCharacter.View == 9) //in kitchen just the legs
    {
    cMonty.Walk((cHuman01.x-70),  cHuman01.y+10, eBlock);
    cMonty.LockView(20);
    cMonty.Animate(0, 3, eOnce, eBlock);
    cHuman01.ChangeRoom(0);
    cMonty.AddInventory(iLegs);
    cMonty.Animate(1, 3, eOnce, eBlock);
    cMonty.UnlockView();
  }
}

function iEyes_UseInv(InventoryItem *theItem, CursorMode mode)
{
  if (player.ActiveInventory == iHeliumTank)
  {
    aBalloonpump02.Play();
    CraftItems(1);
  }
}

function iMeatGrinder_UseInv(InventoryItem *theItem, CursorMode mode)
{
if (player.ActiveInventory == iLegs)
  {
    cMonty.AddInventory(iSludge);
    cMonty.LoseInventory(iLegs);
    cMonty.LoseInventory(iMeatGrinder);
  }
}

function cHuman01_Talk(Character *theCharacter, CursorMode mode)
{
 if (DoorUp==false)
 {
   cHuman01.Say("Open the door, One-Eyes.");
 }
 else
 {
  if (Puzzle01Stage == 0)
  {
    cMonty.Walk(1022, 614, eBlock, eWalkableAreas);
    dHelSeller01.Start();
  }
  else if (Puzzle01Stage == 1)
  {
    dHelSeller02.Start();
  }
  else if (Puzzle01Stage==2)
  {
    cHuman01.SayBackground("Huh? Don't you dare take that helium!");
  }
  else if (Puzzle01Stage==3)
  {
    int talk = Random(3);
    if (talk==0)
    {
    cHuman01.SayBackground("I'm gonna find you and then skin you alive!");
    }
    else if (talk==1)
    {
    cHuman01.SayBackground("You remind me of my first grade teacher... dead. And murdered by ME!");
    }
    else if (talk==2)
    {
    cHuman01.SayBackground("Seriously, you are one dead ugly monster...");
    }
    else if (talk==3)
    {
    cHuman01.SayBackground("-Insert witty quip #4 here-");
    }
  }
  else if (cHuman01.View==18)
  {
    cMonty.Say("I don't think his voice works anymore...");
  }
 }
}

function iBread_UseInv(InventoryItem *theItem, CursorMode mode)
{
if (player.ActiveInventory == iSludge)
  {
    cMonty.AddInventory(iBurgers);
    cMonty.LoseInventory(iBread);
    cMonty.LoseInventory(iSludge);
  }
}

function iHead_UseInv(InventoryItem *theItem, CursorMode mode)
{
if (player.ActiveInventory == iCandles)
  {
    cMonty.AddInventory(iHeadCandles);
    cMonty.LoseInventory(iCandles);
    cMonty.LoseInventory(iHead);
    Mouse.Mode=2;
  }
}

function cHuman01_Look(Character *theCharacter, CursorMode mode)
{
player.Say("Ugh, another pesty no-good human trying to ruin my party.");
}

function iSpoon_Look(InventoryItem *theItem, CursorMode mode)
{
player.Say("Pens can sign documents... and more!");
}

function iEyes_Look(InventoryItem *theItem, CursorMode mode)
{
player.Say("What could I use these for? They're round, balloony shaped, ...");
}

function iSaw_Look(InventoryItem *theItem, CursorMode mode)
{
player.Say("You know what rusty saws are good for? NECKS!");
}

function iHead_Look(InventoryItem *theItem, CursorMode mode)
{
player.Say("Human heads. They're good for holding stuff. In their eye sockets.");
}

function iHeliumTank_Look(InventoryItem *theItem, CursorMode mode)
{
player.Say("We really need to conserve Helium for medical equipment...but just two more 'balloons' and then I'll stop.");
}

function iDynamite_Look(InventoryItem *theItem, CursorMode mode)
{
player.Say("Might have to blow somethiing (or some ONE) up.");
}

function iIntestine_Look(InventoryItem *theItem, CursorMode mode)
{
player.Say("Wow these intenstines are SO LONG... and pretty... I could hang them like art.");
}

function iMeatGrinder_Look(InventoryItem *theItem, CursorMode mode)
{
player.Say("Boy this meat grinder could gring ANYthing into juicy delicious meat");
}

function iLegs_Look(InventoryItem *theItem, CursorMode mode)
{
player.Say("There's human flesh inside these dungarees!");
}

function iSludge_Look(InventoryItem *theItem, CursorMode mode)
{
player.Say("You might not realize it but this is meat. To like, go with bread. For like, feeding my friends.");
}

function iBread_Look(InventoryItem *theItem, CursorMode mode)
{
player.Say("Pretend this bread looks like burger buns.");
}

function iCandles_Look(InventoryItem *theItem, CursorMode mode)
{
player.Say("Now that I have candles, I just need something heavy with two holes to put them in.");
}

function btnIconWalk_OnClick(GUIControl *control, MouseButton button)
{
    Display("hi this is a thing");
    BackgroundMusic.Pause();
}

function Button2_OnClick(GUIControl *control, MouseButton button)
{
close_gui(gHelpGUI01);
open_gui(gHelpGUI02);
}

function Button6_OnClick(GUIControl *control, MouseButton button)
{
close_gui(gHelpGUI02);
cMonty.ChangeRoom(3, 350, 600, eDirectionRight);
}

function Button12_OnClick(GUIControl *control, MouseButton button)
{
close_gui(gHelpGUI02);
open_gui(gHelpGUI03);
}

function Button17_OnClick(GUIControl *control, MouseButton button)
{
close_gui(gHelpGUI03);
cMonty.ChangeRoom(3, 350, 600, eDirectionRight);
}

function iHeadCandles_UseInv(InventoryItem *theItem, CursorMode mode)
{
if (player.ActiveInventory==iTorch)
{
  player.LoseInventory(iTorch);
  player.LoseInventory(iHeadCandles);
  open_gui(gCraftAnimGUI);
  gCraftAnimGUI.BackgroundGraphic=296;
  Wait(WaitGUI*2);
  gCraftAnimGUI.BackgroundGraphic=297;
  Wait(WaitGUI*2);
  gCraftAnimGUI.BackgroundGraphic=298;
  Wait(WaitGUI*2);
  gCraftAnimGUI.BackgroundGraphic=299;
  Wait(WaitGUI*2);
  gCraftAnimGUI.BackgroundGraphic=300;
  Wait(WaitGUI*2);
  gCraftAnimGUI.BackgroundGraphic=301;
  Wait(WaitGUI*2);
  gCraftAnimGUI.BackgroundGraphic=302;
  Wait(WaitGUI*2);
  close_gui(gCraftAnimGUI);
  player.AddInventory(iSkullCandles);
  Mouse.Mode=2;
}
}

function Button18_OnClick(GUIControl *control, MouseButton button)
{
close_gui(gHelpGUI01);
cMonty.ChangeRoom(3, 350, 600, eDirectionRight);
}

function iHeliumTank_UseInv(InventoryItem *theItem, CursorMode mode)
{
  if (player.ActiveInventory == iEyes)
  {
    aBalloonpump02.Play();
    CraftItems(1);
  }
  else
  if (player.ActiveInventory==iSpoon)
  {
    player.Say("Can't write on that.");
  }
}

function ButtonPlay_OnClick(GUIControl *control, MouseButton button)
{
close_gui(gStartScreen);
//cMonty.ChangeRoom(3);
cMonty.ChangeRoom(3, 175, 660, eDirectionRight);
}

function Button20_OnClick(GUIControl *control, MouseButton button)
{
QuitGame(1);
}

function Button21_OnClick(GUIControl *control, MouseButton button)
{
  show_restore_game_dialog();
}

function Button24_OnClick(GUIControl *control, MouseButton button)
{
 if (musicChannel.IsPaused==true)
 {
  Button24.NormalGraphic=91;
  musicChannel.Resume();
 }
 else
 {
 Button24.NormalGraphic=90;
 musicChannel.Pause();
 }
}


function sldMusic_OnChange(GUIControl *control)
{
  musicChannel.Volume=sldMusic.Value;
}



function sldSFX_OnChange(GUIControl *control)
{
Game.SetAudioTypeVolume(eAudioTypeSound, sldSFX.Value, eVolExistingAndFuture);
Game.SetAudioTypeVolume(eAudioTypeAmbientSound, sldSFX.Value, eVolExistingAndFuture);
}

function iTimer_UseInv(InventoryItem *theItem, CursorMode mode)
{
if (player.ActiveInventory == iDynamite)
  {
    player.LoseInventory(iDynamite);
    player.LoseInventory(iTimer);
    player.AddInventory(iTimerDyno);
  }
}

function iDynamite_UseInv(InventoryItem *theItem, CursorMode mode)
{
if (player.ActiveInventory == iTimer)
  {
    player.LoseInventory(iDynamite);
    player.LoseInventory(iTimer);
    player.AddInventory(iTimerDyno);
  }
}

function iCandles_UseInv(InventoryItem *theItem, CursorMode mode)
{
if (player.ActiveInventory == iHead)
  {
    cMonty.AddInventory(iHeadCandles);
    cMonty.LoseInventory(iCandles);
    cMonty.LoseInventory(iHead);
    Mouse.Mode=2;
  }
if (player.ActiveInventory == iTorch)
  {
    cMonty.Say("It's not safe to light candles without jamming them into something sturdy.");
  }
}

function iTorch_UseInv(InventoryItem *theItem, CursorMode mode)
{
if (player.ActiveInventory==iHeadCandles)
{
  player.LoseInventory(iTorch);
  player.LoseInventory(iHeadCandles);
  open_gui(gCraftAnimGUI);
  gCraftAnimGUI.BackgroundGraphic=296;
  Wait(WaitGUI*2);
  gCraftAnimGUI.BackgroundGraphic=297;
  Wait(WaitGUI*2);
  gCraftAnimGUI.BackgroundGraphic=298;
  Wait(WaitGUI*2);
  gCraftAnimGUI.BackgroundGraphic=299;
  Wait(WaitGUI*2);
  gCraftAnimGUI.BackgroundGraphic=300;
  Wait(WaitGUI*2);
  gCraftAnimGUI.BackgroundGraphic=301;
  Wait(WaitGUI*2);
  gCraftAnimGUI.BackgroundGraphic=302;
  Wait(WaitGUI*2);
  close_gui(gCraftAnimGUI);
  player.AddInventory(iSkullCandles);
  Mouse.Mode=2;
}
}

function iTorch_Look(InventoryItem *theItem, CursorMode mode)
{
  cMonty.Say("I could burn something with this");
}

function Button27_OnClick(GUIControl *control, MouseButton button)
{
mouse.Mode=2;
}

function Button28_OnClick(GUIControl *control, MouseButton button)
{
mouse.Mode=1;
}


function cCat_Talk(Character *theCharacter, CursorMode mode)
{
if (CatFriend==0)
{
  if (SpokeCat==false)
  {
    SpokeCat=true;
    AchievementNew=true;
    iACH01.Graphic=431;
    //gQuestKitchen.Visible=true;
    //gQuestAttic.Visible=true;
    //gQuestLivingRoom.Visible=true;
    //Wait(20);
    //gQuestLivingRoom.Controls[6].AsLabel.Visible=true;
    //aWriting.Play();
    
  }
  CatFriend=1;
  cMonty.Say("spss spss spss");
  cCat.Say("Mew");
  cCat.LockView(54);
  cCat.Animate(0, 3, eOnce, eBlock);
  cCat.UnlockView();
  ViewFrame *frame = Game.GetViewFrame(47, 0, 0);
  frame.Graphic=403;
  cCat.SetIdleView(54, 3);
  //opens UI to reveal the task to befriend the cat.
  gQuestKitchen.ZOrder=0;
  gQuestKitchen.Visible=true;
  gQuestAttic.ZOrder=1;
  gQuestAttic.Visible=true;
  gQuestLivingRoom.ZOrder=2;
  gQuestLivingRoom.Visible=true;
  Wait(20);
  gQuestLivingRoom.Controls[6].AsLabel.Visible=true;
  aWriting.Play();
}
else if (CatFriend==1)
{
  CatFriend=2;
  cMonty.Say("Mrowwr?");
  cCat.Say("Mrerr...");
  ViewFrame *frame = Game.GetViewFrame(47, 0, 0);
  frame.Graphic=405;
  ViewFrame *frame2 = Game.GetViewFrame(54, 0, 0);
  frame2.Graphic=404;
  ViewFrame *frame3 = Game.GetViewFrame(54, 0, 1);
  frame3.Graphic=405;
  ViewFrame *frame4 = Game.GetViewFrame(54, 0, 2);
  frame4.Graphic=406;
  ViewFrame *frame5 = Game.GetViewFrame(54, 0, 3);
  frame5.Graphic=405;
  cCat.LockView(54);
  cCat.Animate(0, 3, eOnce, eBlock);
  cCat.UnlockView();
  //cCat.SetIdleView(54, 3);
}
else if (CatFriend==2)
{
  CatFriend=3;
  cMonty.Say("prrrrr...");
  cCat.Say("RRRRWWWRRRRR...");
  dCatQ01.Start();
}
else if (CatFriend==3)
{
  cMonty.Say("I'm so glad that thing is my friend.");
}
}

function cMonty_Talk(Character *theCharacter, CursorMode mode)
{
if (Puzzle01Stage < 3)
{
  cMonty.Say("I think I need to hang the balloons first.");
}
else if (Puzzle01Stage==3)
{
 cMonty.Say("I need to find my saw and my dynamite."); 
}
else if (Puzzle01Stage==4)
{
  cMonty.Say("That jerk's neck looks rather weak...");
}
else if (Puzzle01Stage>4 && Puzzle01Stage<8)
{
  cMonty.Say("I need to get creative with some of these decorations.");
}
else if (Puzzle01Stage>7 && Puzzle01Stage<11)
{
  cMonty.Say("Now that I'm in the kitchen I can make some burgers.");
}
else if (Puzzle01Stage==11)
{
  cMonty.Say("just a few more touches before my friends arrive.");
}
else if (Puzzle01Stage==12)
{
  cMonty.Say("I'm so glad my friends could come for my birthday!");
}
}

function Button33_OnClick(GUIControl *control, MouseButton button)
{
AchievementNew=false;
gIconbar.Controls[8].AsButton.NormalGraphic=421;
CurrentRoom = cMonty.Room;
cSteve.ChangeRoom(CurrentRoom);
cSteve.SetAsPlayer();
//cSteve.AddInventory(iFakeHand);
//cSteve.ActiveInventory=iFakeHand;
open_gui(gAchievements);
}

function Button30_OnClick(GUIControl *control, MouseButton button)
{
close_gui(gAchievements);
cMonty.SetAsPlayer();
}

function Ach_Up_OnClick(GUIControl *control, MouseButton button)
{
AchievementWindow.ScrollUp();
}

function Ach_down_OnClick(GUIControl *control, MouseButton button)
{
AchievementWindow.ScrollDown();
}

function iACH01_Interact(InventoryItem *theItem, CursorMode mode)
{
if (theItem.Graphic==431)
{
  theItem.Graphic=422;
}
}

function iACH01_OtherClick(InventoryItem *theItem, CursorMode mode)
{
if (theItem.Graphic==431)
{
  //theItem.Graphic=422;
}
}

function iACH01_Look(InventoryItem *theItem, CursorMode mode)
{
if (theItem.Graphic==431)
{
  //theItem.Graphic=422;
}
}

function iACH01_UseInv(InventoryItem *theItem, CursorMode mode)
{
if (player.ActiveInventory==iFakeHand)
{
  if (theItem.Graphic==431)
   {
    theItem.Graphic=422;
   }
}
}

function Button31_OnClick(GUIControl *control, MouseButton button)
{
gQuestLivingRoom.Visible=true;
gQuestAttic.Visible=true;
gQuestKitchen.Visible=true;
}

function Button34_OnClick(GUIControl *control, MouseButton button)
{
gQuestLivingRoom.Visible=false;
gQuestAttic.Visible=false;
gQuestKitchen.Visible=false;
CheckSendInTheFriends=true;
}

function Button36_OnClick(GUIControl *control, MouseButton button)
{
gQuestAttic.Visible=false;
gQuestLivingRoom.Visible=false;
gQuestKitchen.Visible=false;
DropTheSpider=true;
}

function Button35_OnClick(GUIControl *control, MouseButton button)
{
if (gQuestAttic.ZOrder!=3)
{
  aPapermix.Play();
  gQuestAttic.ZOrder=3;
  gQuestKitchen.Controls[1].AsLabel.Visible=true;
  if (gQuestLivingRoom.ZOrder!=1)
  {
    gQuestLivingRoom.ZOrder=(gQuestLivingRoom.ZOrder-1);
  }
  if (gQuestKitchen.ZOrder!=1)
  {
    gQuestKitchen.ZOrder=(gQuestKitchen.ZOrder-1);
  }
}
}

function Button38_OnClick(GUIControl *control, MouseButton button)
{
gQuestLivingRoom.Visible=false;
gQuestAttic.Visible=false;
gQuestKitchen.Visible=false;
}

function Button32_OnClick(GUIControl *control, MouseButton button)
{
if (gQuestLivingRoom.ZOrder!=3)
{
  aPapermix.Play();
  gQuestLivingRoom.ZOrder=3;
  gQuestKitchen.Controls[1].AsLabel.Visible=true;
  if (gQuestKitchen.ZOrder!=1)
  {
    gQuestKitchen.ZOrder=(gQuestKitchen.ZOrder-1);
  }
  if (gQuestAttic.ZOrder!=1)
  {
    gQuestAttic.ZOrder=(gQuestAttic.ZOrder-1);
  }
}
}

function Button37_OnClick(GUIControl *control, MouseButton button)
{
if (gQuestKitchen.ZOrder!=3)
{
  aPapermix.Play();
  gQuestKitchen.ZOrder=3;
  gQuestKitchen.Controls[1].AsLabel.Visible=false;
  if (gQuestLivingRoom.ZOrder!=1)
  {
    gQuestLivingRoom.ZOrder=(gQuestLivingRoom.ZOrder-1);
  }
  if (gQuestAttic.ZOrder!=1)
  {
    gQuestAttic.ZOrder=(gQuestAttic.ZOrder-1);
  }
}
}

function Button_Retry_OnClick(GUIControl *control, MouseButton button)
{
//reset kitchen
//reset attic
//reset livingroom
//reset global variables
gReplay.Visible=false;
AtticToolCount=0;
CanDieInGrinder=0;
CanGetTimer=false;
DevilSkeleton=false;
DoorUp=false;
EyeballAnim=false;
GameSpeedFrames=0;
GameSpeedMinutes=0;
LabelMinutes.Text=String.Format("%d", GameSpeedMinutes);
GameSpeedSeconds=0;
GotPen=false;
HeadRoll=false;
HumanWalkAX=970;
HumanWalkAY=533;
HumanWalkBX=1150;
HumanWalkBY=666;
IsAtticDoorOpen=false;
Puzzle01Stage=0;
PuzzleNum=0;
RunDevilDust=false;
ShowSillyHead=false;
//reset quest pages
gQuestKitchen.Controls[7].AsButton.Visible=false;
gQuestKitchen.Controls[8].AsButton.Visible=false;
gQuestKitchen.Controls[9].AsButton.Visible=false;
gQuestKitchen.Controls[4].AsLabel.Visible=false;
gQuestKitchen.Controls[5].AsLabel.Visible=false;
gQuestKitchen.Controls[6].AsLabel.Visible=false;
gQuestAttic.Controls[5].AsButton.Visible=false;
gQuestAttic.Controls[6].AsButton.Visible=false;
gQuestAttic.Controls[7].AsButton.Visible=false;
gQuestAttic.Controls[2].AsLabel.Visible=false;
gQuestAttic.Controls[3].AsLabel.Visible=false;
gQuestLivingRoom.Controls[9].AsButton.Visible=false;
gQuestLivingRoom.Controls[10].AsButton.Visible=false;
gQuestLivingRoom.Controls[11].AsButton.Visible=false;
gQuestLivingRoom.Controls[12].AsButton.Visible=false;
gQuestLivingRoom.Controls[13].AsButton.Visible=false;
gQuestLivingRoom.Controls[14].AsButton.Visible=false;
gQuestLivingRoom.Controls[15].AsButton.Visible=false;
gQuestLivingRoom.Controls[2].AsLabel.Visible=false;
gQuestLivingRoom.Controls[3].AsLabel.Visible=false;
gQuestLivingRoom.Controls[4].AsLabel.Visible=false;
gQuestLivingRoom.Controls[5].AsLabel.Visible=false;
gQuestLivingRoom.Controls[6].AsLabel.Visible=false;
gQuestLivingRoom.Controls[7].AsLabel.Visible=false;
//reset inventory
player.LoseInventory(iSpoon);
player.LoseInventory(iEyes);
player.LoseInventory(iSaw);
player.LoseInventory(iHead);
player.LoseInventory(iHeliumTank);
player.LoseInventory(iDynamite);
player.LoseInventory(iIntestine);
player.LoseInventory(iEyeBalloons);
player.LoseInventory(iMeatGrinder);
player.LoseInventory(iLegs);
player.LoseInventory(iSludge);
player.LoseInventory(iBread);
player.LoseInventory(iBurgers);
player.LoseInventory(iCandles);
player.LoseInventory(iHeadCandles);
player.LoseInventory(iTorch);
player.LoseInventory(iExacto);
player.LoseInventory(iLadder);
player.LoseInventory(iSkullCandles);
player.LoseInventory(iTimer);
player.LoseInventory(iTimerDyno);
player.LoseInventory(iFakeHand);
player.LoseInventory(iCarpetRoll);
player.LoseInventory(iFoldingTable);
player.LoseInventory(iTee);
player.LoseInventory(iPaintBrush);
player.LoseInventory(iTeeHappy);
player.LoseInventory(iIntestBanner);
//softloads
SoftLoadAttic=true;
SoftLoadKitchen=true;
SoftLoadLiving=true;
SoftReset=true;
gQuestKitchen.ZOrder=0;
gQuestAttic.ZOrder=1;
gQuestLivingRoom.ZOrder=2;
cMonty.ChangeRoom(4, 600, 1400);
}

//function BeginTimer()
//{
//  while (GameSpeedMinutes<100)
//  {
//  GameSpeedFrames++;
//  if (GameSpeedFrames==40)
//  {
//   GameSpeedFrames=0;
//    GameSpeedSeconds++;
//    LabelSeconds.Text=String.Format("%d", GameSpeedSeconds);
    //LabelSeconds=string.format(%d, GameSpeedSeconds);
    //gAchievements
//    if (GameSpeedSeconds==60)
//    {
//      GameSpeedSeconds=0;
//      GameSpeedMinutes++;
//      LabelMinutes.Text=String.Format("%d", GameSpeedMinutes);
//    }
//  }
//  }
//}
function iTee_UseInv(InventoryItem *theItem, CursorMode mode)
{
if (player.ActiveInventory==iPaintBrushBlood)
{
  player.LoseInventory(iPaintBrushBlood);
  player.LoseInventory(iTee);
  player.AddInventory(iTeeHappy);
}
}

function iPaintBrushBlood_UseInv(InventoryItem *theItem, CursorMode mode)
{
if (player.ActiveInventory==iTee)
{
  player.LoseInventory(iPaintBrushBlood);
  player.LoseInventory(iTee);
  player.AddInventory(iTeeHappy);
}
}

function iTeeHappy_UseInv(InventoryItem *theItem, CursorMode mode)
{
if (player.ActiveInventory==iIntestine)
{
  player.LoseInventory(iIntestine);
  player.LoseInventory(iTeeHappy);
  player.AddInventory(iIntestBanner);
}
}

function iIntestine_UseInv(InventoryItem *theItem, CursorMode mode)
{
if (player.ActiveInventory==iTeeHappy)
{
  player.LoseInventory(iIntestine);
  player.LoseInventory(iTeeHappy);
  player.AddInventory(iIntestBanner);
}
}

function iSludge_UseInv(InventoryItem *theItem, CursorMode mode)
{
if (player.ActiveInventory==iBread)
{
  player.LoseInventory(iSludge);
  player.LoseInventory(iBread);
  player.AddInventory(iBurgers);
}
}

function iExacto_Look(InventoryItem *theItem, CursorMode mode)
{
  cMonty.Say("In lieu of fire, sharp blades are great for opening old boxes."); 
}

function iCarpetRoll_Look(InventoryItem *theItem, CursorMode mode)
{
  cMonty.Say("This carpet would look nice downstairs.");
}

function iFoldingTable_Look(InventoryItem *theItem, CursorMode mode)
{
  cMonty.Say("My friends and I could gather around this table and eat burgers.");
}

function iTimer_Look(InventoryItem *theItem, CursorMode mode)
{
cMonty.Say("It's a timing device - er, I mean, it's a clock.");
}

function iTimerDyno_Look(InventoryItem *theItem, CursorMode mode)
{
cMonty.Say("Oh yeah with a timer like this, it's easy to not blow up!");
}

function iTee_Look(InventoryItem *theItem, CursorMode mode)
{
cMonty.Say("This t-shirt could be reused for something later.");
}

function iPaintBrush_Look(InventoryItem *theItem, CursorMode mode)
{
cMonty.Say("I could use this to paint a message on something canvassy.");
}

function iLadder_Look(InventoryItem *theItem, CursorMode mode)
{
cMonty.Say("Ladders are for ladding, and accessing high places I suppose.");
}

function iBurgers_Look(InventoryItem *theItem, CursorMode mode)
{
cMonty.Say("Hmmm my friends are going to love these Humburgers (short for Human-burgers).");
}

function iTeeHappy_Look(InventoryItem *theItem, CursorMode mode)
{
cMonty.Say("I should attach this 'banner' to something long and stringy.");
}

function iIntestBanner_Look(InventoryItem *theItem, CursorMode mode)
{
cMonty.Say("Wow, it almost looks professional!");
}

function iHeadCandles_Look(InventoryItem *theItem, CursorMode mode)
{
cMonty.Say("What a glorious centerpiece.");
}

function cGhosty_Talk(Character *theCharacter, CursorMode mode)
{
dGhosty01.Start();
}

function cBuzzy_Talk(Character *theCharacter, CursorMode mode)
{
dBuzzy01.Start();
}

function cOcty_Talk(Character *theCharacter, CursorMode mode)
{
dOcty01.Start();
}

function Button40_OnClick(GUIControl *control, MouseButton button)
{
//reset kitchen
//reset attic
//reset livingroom
//reset global variables
gReplay.Visible=false;
AtticToolCount=0;
CanDieInGrinder=0;
CanGetTimer=false;
DevilSkeleton=false;
DoorUp=false;
EyeballAnim=false;
GameSpeedFrames=0;
GameSpeedMinutes=0;
LabelMinutes.Text=String.Format("%d", GameSpeedMinutes);
GameSpeedSeconds=0;
GotPen=false;
HeadRoll=false;
HumanWalkAX=970;
HumanWalkAY=533;
HumanWalkBX=1150;
HumanWalkBY=666;
IsAtticDoorOpen=false;
Puzzle01Stage=0;
PuzzleNum=0;
RunDevilDust=false;
ShowSillyHead=false;
//reset quest pages
gQuestKitchen.Controls[7].AsButton.Visible=false;
gQuestKitchen.Controls[8].AsButton.Visible=false;
gQuestKitchen.Controls[9].AsButton.Visible=false;
gQuestKitchen.Controls[4].AsLabel.Visible=false;
gQuestKitchen.Controls[5].AsLabel.Visible=false;
gQuestKitchen.Controls[6].AsLabel.Visible=false;
gQuestAttic.Controls[5].AsButton.Visible=false;
gQuestAttic.Controls[6].AsButton.Visible=false;
gQuestAttic.Controls[7].AsButton.Visible=false;
gQuestAttic.Controls[2].AsLabel.Visible=false;
gQuestAttic.Controls[3].AsLabel.Visible=false;
gQuestLivingRoom.Controls[9].AsButton.Visible=false;
gQuestLivingRoom.Controls[10].AsButton.Visible=false;
gQuestLivingRoom.Controls[11].AsButton.Visible=false;
gQuestLivingRoom.Controls[12].AsButton.Visible=false;
gQuestLivingRoom.Controls[13].AsButton.Visible=false;
gQuestLivingRoom.Controls[14].AsButton.Visible=false;
gQuestLivingRoom.Controls[15].AsButton.Visible=false;
gQuestLivingRoom.Controls[2].AsLabel.Visible=false;
gQuestLivingRoom.Controls[3].AsLabel.Visible=false;
gQuestLivingRoom.Controls[4].AsLabel.Visible=false;
gQuestLivingRoom.Controls[5].AsLabel.Visible=false;
gQuestLivingRoom.Controls[6].AsLabel.Visible=false;
gQuestLivingRoom.Controls[7].AsLabel.Visible=false;
//reset inventory
player.LoseInventory(iSpoon);
player.LoseInventory(iEyes);
player.LoseInventory(iSaw);
player.LoseInventory(iHead);
player.LoseInventory(iHeliumTank);
player.LoseInventory(iDynamite);
player.LoseInventory(iIntestine);
player.LoseInventory(iEyeBalloons);
player.LoseInventory(iMeatGrinder);
player.LoseInventory(iLegs);
player.LoseInventory(iSludge);
player.LoseInventory(iBread);
player.LoseInventory(iBurgers);
player.LoseInventory(iCandles);
player.LoseInventory(iHeadCandles);
player.LoseInventory(iTorch);
player.LoseInventory(iExacto);
player.LoseInventory(iLadder);
player.LoseInventory(iSkullCandles);
player.LoseInventory(iTimer);
player.LoseInventory(iTimerDyno);
player.LoseInventory(iFakeHand);
player.LoseInventory(iCarpetRoll);
player.LoseInventory(iFoldingTable);
player.LoseInventory(iTee);
player.LoseInventory(iPaintBrush);
player.LoseInventory(iTeeHappy);
player.LoseInventory(iIntestBanner);
//softloads
SoftLoadAttic=true;
SoftLoadKitchen=true;
SoftLoadLiving=true;
SoftReset=true;
gQuestKitchen.ZOrder=0;
gQuestAttic.ZOrder=1;
gQuestLivingRoom.ZOrder=2;
cMonty.ChangeRoom(4, 600, 1400);
}

function Button41_OnClick(GUIControl *control, MouseButton button)
{
  close_owning_gui(control);
  open_gui(gRestart);
}
